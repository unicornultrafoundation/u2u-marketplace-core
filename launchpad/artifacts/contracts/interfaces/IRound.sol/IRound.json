{
  "_format": "hh-sol-artifact-1",
  "contractName": "IRound",
  "sourceName": "contracts/interfaces/IRound.sol",
  "abi": [
    {
      "inputs": [],
      "name": "getRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum LibStructs.RoundType",
              "name": "roundType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startClaim",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountNFT",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "soldAmountNFT",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountNFTPerWallet",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibStructs.Round",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newMaxNFTPerWallet",
          "type": "uint256"
        }
      ],
      "name": "receiveAndIncreaseMaxAmountNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newMaxNFTPerWallet",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibStructs.Token[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "name": "receiveTokensAndIncreaseMaxAmountNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isERC721",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isU2UCollection",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isPreminted",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "collectionAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct LibStructs.Collection",
          "name": "newCollection",
          "type": "tuple"
        }
      ],
      "name": "setCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {}
}
